#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PRUEBA DIRECTA: ¬øQU√â RECIBE LA IA?
=================================
Prueba directa del m√©todo prepare_data_summary sin GUI
"""

import os
import json
import tempfile

def test_prepare_data_summary_direct():
    """Prueba directa del m√©todo prepare_data_summary"""
    print("üî¨ PRUEBA DIRECTA DEL M√âTODO prepare_data_summary")
    print("=" * 60)
    
    # Cargar datos
    archivo_datos = "datos_extraidos_app.json"
    if not os.path.exists(archivo_datos):
        print(f"‚ùå No se encontr√≥ {archivo_datos}")
        return
    
    with open(archivo_datos, 'r', encoding='utf-8') as f:
        current_data = json.load(f)
    
    print(f"‚úÖ Datos cargados: {len(current_data.get('hojas', []))} hojas")
    
    # Reproducir la l√≥gica del m√©todo prepare_data_summary directamente
    try:
        # Importar el analizador inteligente y reestructurador
        from analizador_datos_inteligente import AnalizadorDatosInteligente
        from reestructurador_simple import reestructurar_datos_simple
        
        print("‚úÖ M√≥dulos importados correctamente")
        
        # Guardar datos temporalmente para an√°lisis
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as temp_file:
            json.dump(current_data, temp_file, ensure_ascii=False, indent=2)
            temp_path = temp_file.name
        
        print(f"‚úÖ Datos guardados temporalmente en: {temp_path}")
        
        # Realizar an√°lisis inteligente
        analizador = AnalizadorDatosInteligente()
        analisis = analizador.analizar_datos_estructurados(temp_path)
        
        if analisis:
            print("‚úÖ An√°lisis inteligente exitoso")
            print(f"   ‚Ä¢ Proveedores: {len(analisis['proveedores_identificados'])}")
            print(f"   ‚Ä¢ Registros: {analisis['resumen_general']['total_registros']:,}")
        else:
            print("‚ùå An√°lisis inteligente fall√≥")
        
        # Realizar reestructuraci√≥n inteligente de datos
        datos_reestructurados = reestructurar_datos_simple(temp_path)
        
        if datos_reestructurados:
            print("‚úÖ Reestructuraci√≥n exitosa")
            total_reestructurados = sum(len(productos) for productos in datos_reestructurados.values())
            print(f"   ‚Ä¢ Proveedores reestructurados: {len(datos_reestructurados)}")
            print(f"   ‚Ä¢ Productos reestructurados: {total_reestructurados:,}")
        else:
            print("‚ùå Reestructuraci√≥n fall√≥")
        
        # Limpiar archivo temporal
        os.remove(temp_path)
        
        if analisis and datos_reestructurados:
            # Generar resumen inteligente (simplificado)
            resumen_inteligente = generar_resumen_simplificado(analisis, datos_reestructurados)
            
            # Guardar resumen para inspecci√≥n
            with open("resumen_directo_ia.txt", 'w', encoding='utf-8') as f:
                f.write(resumen_inteligente)
            
            print("‚úÖ Resumen generado y guardado en 'resumen_directo_ia.txt'")
            
            # Mostrar primeras l√≠neas
            print("\nüìÑ PRIMERAS L√çNEAS DEL RESUMEN:")
            print("-" * 40)
            lineas = resumen_inteligente.split('\n')[:15]
            for i, linea in enumerate(lineas, 1):
                print(f"{i:2d}. {linea}")
            
            # Verificar indicadores de an√°lisis inteligente
            verificar_indicadores(resumen_inteligente)
            
            return resumen_inteligente
        else:
            print("‚ùå No se pudo generar el resumen inteligente")
            return None
            
    except Exception as e:
        print(f"‚ùå Error en prueba directa: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

def generar_resumen_simplificado(analisis, datos_reestructurados):
    """Genera un resumen simplificado combinando an√°lisis y reestructuraci√≥n"""
    resumen = []
    
    # Encabezado del an√°lisis
    resumen.append("=== AN√ÅLISIS INTELIGENTE CON REESTRUCTURACI√ìN DE DATOS ===")
    resumen.append(f"PLANILLA: {analisis['resumen_general']['planilla']}")
    resumen.append(f"TOTAL REGISTROS ORIGINALES: {analisis['resumen_general']['total_registros']:,}")
    
    # Estad√≠sticas de reestructuraci√≥n
    total_reestructurados = sum(len(productos) for productos in datos_reestructurados.values())
    resumen.append(f"TOTAL PRODUCTOS REESTRUCTURADOS: {total_reestructurados:,}")
    resumen.append(f"EFICIENCIA DE REESTRUCTURACI√ìN: {(total_reestructurados/analisis['resumen_general']['total_registros']*100):.1f}%")
    resumen.append("")
    
    # An√°lisis por proveedor con datos reestructurados
    resumen.append("=== PROVEEDORES CON DATOS REESTRUCTURADOS ===")
    for proveedor, productos in datos_reestructurados.items():
        # Estad√≠sticas de calidad de los datos reestructurados
        productos_con_precio = len([p for p in productos if p.get('PRECIO')])
        productos_con_codigo = len([p for p in productos if p.get('CODIGO')])
        productos_con_marca = len([p for p in productos if p.get('MARCA')])
        
        resumen.append(f"{proveedor}:")
        resumen.append(f"  ‚Ä¢ Productos reestructurados: {len(productos):,}")
        resumen.append(f"  ‚Ä¢ Con precio detectado: {productos_con_precio:,} ({productos_con_precio/len(productos)*100:.1f}%)")
        resumen.append(f"  ‚Ä¢ Con c√≥digo identificado: {productos_con_codigo:,} ({productos_con_codigo/len(productos)*100:.1f}%)")
        resumen.append(f"  ‚Ä¢ Con marca detectada: {productos_con_marca:,} ({productos_con_marca/len(productos)*100:.1f}%)")
        
        # Muestra de productos reestructurados
        if productos:
            resumen.append(f"  ‚Ä¢ Muestra de productos reestructurados:")
            for i, producto in enumerate(productos[:2], 1):
                resumen.append(f"    {i}. C√ìDIGO: {producto.get('CODIGO', 'N/A')}")
                resumen.append(f"       DESCRIPCI√ìN: {producto.get('DESCRIPCION', 'N/A')[:50]}...")
                resumen.append(f"       PRECIO: {producto.get('PRECIO', 'N/A')} {producto.get('MONEDA', '')}")
                resumen.append(f"       MARCA: {producto.get('MARCA', 'N/A')}")
        
        resumen.append("")
    
    # Informaci√≥n contextual
    resumen.append("=== INFORMACI√ìN CONTEXTUAL ===")
    resumen.append("Este an√°lisis se basa en datos REESTRUCTURADOS INTELIGENTEMENTE.")
    resumen.append("Los datos han sido procesados para identificar correctamente:")
    resumen.append("- C√ìDIGOS DE PRODUCTOS separados de descripciones")
    resumen.append("- PRECIOS extra√≠dos y clasificados por moneda")
    resumen.append("- PROVEEDORES organizados por hoja")
    resumen.append("- MARCAS detectadas autom√°ticamente")
    resumen.append("- DESCRIPCIONES limpias y optimizadas")
    resumen.append("- DUPLICADOS eliminados autom√°ticamente")
    resumen.append("")
    resumen.append("USA ESTE AN√ÅLISIS PARA RECOMENDAR MEJORAS EN LA ESTRUCTURACI√ìN DE DATOS.")
    
    return "\n".join(resumen)

def verificar_indicadores(resumen):
    """Verifica indicadores de an√°lisis inteligente en el resumen"""
    print(f"\nüîç VERIFICACI√ìN DE INDICADORES:")
    print("-" * 40)
    
    indicadores = {
        "AN√ÅLISIS INTELIGENTE": 0,
        "REESTRUCTURACI√ìN": 0,
        "C√ìDIGO": 0,
        "PRECIO": 0,
        "MARCA": 0,
        "PROVEEDOR": 0,
        "DATOS REESTRUCTURADOS": 0
    }
    
    for indicador in indicadores:
        count = resumen.upper().count(indicador)
        indicadores[indicador] = count
        estado = "‚úÖ" if count > 0 else "‚ùå"
        print(f"   {estado} {indicador}: {count} menciones")
    
    total_indicadores = sum(1 for count in indicadores.values() if count > 0)
    print(f"\nüìä RESUMEN: {total_indicadores}/{len(indicadores)} indicadores presentes")
    
    if total_indicadores >= 5:
        print("‚úÖ EL RESUMEN CONTIENE AN√ÅLISIS INTELIGENTE")
    else:
        print("‚ùå EL RESUMEN NO PARECE CONTENER AN√ÅLISIS INTELIGENTE")

if __name__ == "__main__":
    test_prepare_data_summary_direct()
