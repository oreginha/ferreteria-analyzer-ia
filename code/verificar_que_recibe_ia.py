#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VERIFICACI√ìN: ¬øQU√â EST√Å RECIBIENDO LA IA?
=======================================
Script para verificar exactamente qu√© datos est√° recibiendo la IA
y por qu√© sigue analizando datos crudos en lugar de datos reestructurados.
"""

import os
import json
from ferreteria_analyzer_app import FerreteriaAnalyzerApp
import tempfile

def verificar_datos_ia():
    """Verifica exactamente qu√© datos est√° recibiendo la IA"""
    print("üîç VERIFICANDO QU√â RECIBE LA IA")
    print("=" * 50)
    
    # Cargar datos de ejemplo
    archivo_datos = "datos_extraidos_app.json"
    if not os.path.exists(archivo_datos):
        print(f"‚ùå No se encontr√≥ {archivo_datos}")
        return
    
    # Crear instancia de la aplicaci√≥n
    app = FerreteriaAnalyzerApp(None)
    
    # Cargar datos
    with open(archivo_datos, 'r', encoding='utf-8') as f:
        app.current_data = json.load(f)
    
    print(f"‚úÖ Datos cargados: {len(app.current_data.get('hojas', []))} hojas")
    
    # Obtener el resumen que va a la IA
    print("\nüß† OBTENIENDO RESUMEN PARA IA...")
    resumen_ia = app.prepare_data_summary()
    
    # Guardar el resumen para inspecci√≥n
    with open("resumen_que_recibe_ia.txt", 'w', encoding='utf-8') as f:
        f.write(resumen_ia)
    
    print("‚úÖ Resumen guardado en 'resumen_que_recibe_ia.txt'")
    
    # Mostrar primeras l√≠neas del resumen
    print("\nüìÑ PRIMERAS L√çNEAS DEL RESUMEN PARA IA:")
    print("-" * 40)
    lineas = resumen_ia.split('\n')[:20]
    for i, linea in enumerate(lineas, 1):
        print(f"{i:2d}. {linea}")
    
    print(f"\nüìä ESTAD√çSTICAS DEL RESUMEN:")
    print(f"   ‚Ä¢ Total l√≠neas: {len(resumen_ia.split())}")
    print(f"   ‚Ä¢ Total caracteres: {len(resumen_ia):,}")
    print(f"   ‚Ä¢ Tama√±o estimado: {len(resumen_ia.encode('utf-8')) / 1024:.1f} KB")
    
    # Verificar si contiene indicadores de an√°lisis inteligente
    indicadores_inteligentes = [
        "AN√ÅLISIS INTELIGENTE",
        "REESTRUCTURACI√ìN",
        "C√ìDIGO",
        "PRECIO",
        "MARCA",
        "PROVEEDOR"
    ]
    
    print(f"\nüîç INDICADORES DE AN√ÅLISIS INTELIGENTE:")
    for indicador in indicadores_inteligentes:
        count = resumen_ia.upper().count(indicador)
        estado = "‚úÖ" if count > 0 else "‚ùå"
        print(f"   {estado} {indicador}: {count} menciones")
    
    # Verificar si hay menciones de datos crudos vs reestructurados
    menciones_crudos = resumen_ia.upper().count("CRUDO")
    menciones_reestructurados = resumen_ia.upper().count("REESTRUCTURADO")
    
    print(f"\n‚öñÔ∏è AN√ÅLISIS DE CONTENIDO:")
    print(f"   ‚Ä¢ Menciones 'CRUDO': {menciones_crudos}")
    print(f"   ‚Ä¢ Menciones 'REESTRUCTURADO': {menciones_reestructurados}")
    
    if menciones_reestructurados > menciones_crudos:
        print("   ‚úÖ LA IA EST√Å RECIBIENDO DATOS REESTRUCTURADOS")
    else:
        print("   ‚ùå LA IA PODR√çA ESTAR RECIBIENDO DATOS CRUDOS")
    
    return resumen_ia

def verificar_analisis_inteligente():
    """Verifica si el an√°lisis inteligente est√° funcionando"""
    print("\n" + "=" * 50)
    print("üß† VERIFICANDO AN√ÅLISIS INTELIGENTE")
    print("=" * 50)
    
    try:
        from analizador_datos_inteligente import AnalizadorDatosInteligente
        from reestructurador_simple import reestructurar_datos_simple
        
        archivo_datos = "datos_extraidos_app.json"
        
        # Probar an√°lisis inteligente directamente
        analizador = AnalizadorDatosInteligente()
        analisis = analizador.analizar_datos_estructurados(archivo_datos)
        
        if analisis:
            print("‚úÖ AnalizadorDatosInteligente: FUNCIONAL")
            print(f"   ‚Ä¢ Proveedores identificados: {len(analisis['proveedores_identificados'])}")
            print(f"   ‚Ä¢ Total registros: {analisis['resumen_general']['total_registros']:,}")
        else:
            print("‚ùå AnalizadorDatosInteligente: FALLA")
        
        # Probar reestructuraci√≥n
        datos_reestructurados = reestructurar_datos_simple(archivo_datos)
        
        if datos_reestructurados:
            print("‚úÖ Reestructurador: FUNCIONAL")
            print(f"   ‚Ä¢ Proveedores reestructurados: {len(datos_reestructurados)}")
            total_productos = sum(len(productos) for productos in datos_reestructurados.values())
            print(f"   ‚Ä¢ Total productos reestructurados: {total_productos:,}")
        else:
            print("‚ùå Reestructurador: FALLA")
            
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n: {str(e)}")
        return False
    
    return True

def main():
    """Funci√≥n principal"""
    print("üî¨ DIAGN√ìSTICO: ¬øQUE RECIBE LA IA?")
    print("=" * 60)
    
    # Verificar an√°lisis inteligente
    if not verificar_analisis_inteligente():
        print("‚ùå El an√°lisis inteligente tiene problemas")
        return
    
    # Verificar qu√© recibe la IA
    resumen = verificar_datos_ia()
    
    print("\n" + "=" * 60)
    print("üéØ CONCLUSI√ìN:")
    
    if "AN√ÅLISIS INTELIGENTE CON REESTRUCTURACI√ìN" in resumen:
        print("‚úÖ LA IA EST√Å RECIBIENDO DATOS REESTRUCTURADOS CORRECTAMENTE")
        print("   El problema podr√≠a estar en:")
        print("   ‚Ä¢ La configuraci√≥n de la API de Gemini")
        print("   ‚Ä¢ El prompt enviado a la IA")
        print("   ‚Ä¢ La interpretaci√≥n de los datos por la IA")
    else:
        print("‚ùå LA IA NO EST√Å RECIBIENDO DATOS REESTRUCTURADOS")
        print("   ‚Ä¢ Revisa el m√©todo prepare_data_summary()")
        print("   ‚Ä¢ Verifica las importaciones")
        print("   ‚Ä¢ Comprueba los archivos de an√°lisis inteligente")
    
    print(f"\nüìã REVISA EL ARCHIVO: resumen_que_recibe_ia.txt")

if __name__ == "__main__":
    main()
