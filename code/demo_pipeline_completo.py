"""
Demo del Pipeline Completo - An√°lisis de Ferreter√≠a con IA
=========================================================

Este script demuestra todo el pipeline de procesamiento:
1. Extracci√≥n de datos desde archivos HTML
2. Purificaci√≥n de datos con IA
3. An√°lisis y estructuraci√≥n
4. Exportaci√≥n a Excel

Autor: Asistente IA
Fecha: 12 de junio de 2025
"""

import os
import sys
import json
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from pathlib import Path

# Agregar el directorio actual al path para importar m√≥dulos
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

def mostrar_bienvenida():
    """Muestra una ventana de bienvenida explicando el pipeline"""
    
    ventana = tk.Tk()
    ventana.title("üîß Pipeline Completo - An√°lisis de Ferreter√≠a con IA")
    ventana.geometry("800x600")
    ventana.configure(bg='#f0f0f0')
    
    # Frame principal
    main_frame = ttk.Frame(ventana, padding="20")
    main_frame.pack(fill=tk.BOTH, expand=True)
    
    # T√≠tulo
    titulo = ttk.Label(main_frame, text="üîß Sistema de An√°lisis de Ferreter√≠a con IA", 
                       font=('Arial', 18, 'bold'))
    titulo.pack(pady=(0, 20))
    
    # Descripci√≥n del pipeline
    descripcion = """
üéØ PIPELINE COMPLETO DE PROCESAMIENTO:

1Ô∏è‚É£ EXTRACCI√ìN DE DATOS
   ‚Ä¢ Selecciona directorio con archivos HTML (Excel convertido)
   ‚Ä¢ Extrae autom√°ticamente productos, precios y descripciones
   ‚Ä¢ Identifica categor√≠as y c√≥digos de productos

2Ô∏è‚É£ PURIFICACI√ìN CON IA üßπ
   ‚Ä¢ Elimina texto irrelevante y duplicados
   ‚Ä¢ Estructura los datos en formato est√°ndar
   ‚Ä¢ Valida c√≥digos y precios autom√°ticamente
   ‚Ä¢ Agrupa productos por categor√≠as

3Ô∏è‚É£ AN√ÅLISIS INTELIGENTE ü§ñ
   ‚Ä¢ An√°lisis de precios y tendencias
   ‚Ä¢ Identificaci√≥n de productos destacados
   ‚Ä¢ Sugerencias de optimizaci√≥n
   ‚Ä¢ Detecci√≥n de inconsistencias

4Ô∏è‚É£ EXPORTACI√ìN ESTRUCTURADA üìä
   ‚Ä¢ Genera Excel con m√∫ltiples hojas
   ‚Ä¢ Resumen ejecutivo autom√°tico
   ‚Ä¢ Datos organizados por categor√≠as
   ‚Ä¢ Formato profesional y f√°cil lectura

üöÄ BENEFICIOS:
   ‚Ä¢ Procesamiento autom√°tico y r√°pido
   ‚Ä¢ Datos limpios y estructurados
   ‚Ä¢ An√°lisis inteligente con IA
   ‚Ä¢ Exportaci√≥n lista para usar
"""
    
    text_widget = tk.Text(main_frame, wrap=tk.WORD, width=80, height=25, 
                         font=('Consolas', 10), bg='white', fg='#333')
    text_widget.insert(tk.END, descripcion)
    text_widget.config(state=tk.DISABLED)
    
    # Scrollbar para el texto
    scrollbar = ttk.Scrollbar(main_frame, orient=tk.VERTICAL, command=text_widget.yview)
    text_widget.configure(yscrollcommand=scrollbar.set)
    
    # Frame para el texto y scrollbar
    text_frame = ttk.Frame(main_frame)
    text_frame.pack(fill=tk.BOTH, expand=True, pady=10)
    
    text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
      # Botones
    button_frame = ttk.Frame(main_frame)
    button_frame.pack(pady=20)
    
    def abrir_app_principal():
        ventana.destroy()
        # Cambiar al directorio correcto y ejecutar
        app_path = current_dir / "ferreteria_analyzer_app.py"
        os.system(f'cd "{current_dir}" ; python "{app_path}"')
    
    def abrir_launcher():
        ventana.destroy()
        launcher_path = current_dir.parent / "YAYI FULL - 3 FEBRERO_archivos" / "launcher_app.py"
        if launcher_path.exists():
            os.system(f'python "{launcher_path}"')
        else:
            messagebox.showwarning("Archivo no encontrado", f"No se encontr√≥ el launcher en: {launcher_path}")
    
    def mostrar_estadisticas():
        mostrar_stats_proyecto()
    
    ttk.Button(button_frame, text="üöÄ Abrir Aplicaci√≥n Principal", 
               command=abrir_app_principal, width=25).pack(side=tk.LEFT, padx=5)
    
    ttk.Button(button_frame, text="üé¨ Ver Demo Visual", 
               command=abrir_launcher, width=20).pack(side=tk.LEFT, padx=5)
    
    ttk.Button(button_frame, text="üìä Estad√≠sticas", 
               command=mostrar_estadisticas, width=15).pack(side=tk.LEFT, padx=5)
    
    ttk.Button(button_frame, text="‚ùå Cerrar", 
               command=ventana.destroy, width=10).pack(side=tk.LEFT, padx=5)
    
    # Centrar ventana
    ventana.update_idletasks()
    x = (ventana.winfo_screenwidth() // 2) - (ventana.winfo_width() // 2)
    y = (ventana.winfo_screenheight() // 2) - (ventana.winfo_height() // 2)
    ventana.geometry(f"+{x}+{y}")
    
    ventana.mainloop()

def mostrar_stats_proyecto():
    """Muestra estad√≠sticas del proyecto"""
    
    stats_window = tk.Toplevel()
    stats_window.title("üìä Estad√≠sticas del Proyecto")
    stats_window.geometry("600x500")
    stats_window.configure(bg='#f0f0f0')
    
    frame = ttk.Frame(stats_window, padding="20")
    frame.pack(fill=tk.BOTH, expand=True)
    
    # T√≠tulo
    ttk.Label(frame, text="üìä Estad√≠sticas del Proyecto", 
              font=('Arial', 16, 'bold')).pack(pady=(0, 20))
    
    # Contar archivos
    archivos_py = len(list(current_dir.glob("*.py")))
    archivos_json = len(list(current_dir.glob("*.json")))
    archivos_xlsx = len(list(current_dir.glob("*.xlsx")))
    
    # Estad√≠sticas
    stats_text = f"""
üîß ARCHIVOS DEL PROYECTO:
   ‚Ä¢ Scripts Python: {archivos_py}
   ‚Ä¢ Archivos JSON: {archivos_json}
   ‚Ä¢ Archivos Excel: {archivos_xlsx}

üìà FUNCIONALIDADES IMPLEMENTADAS:
   ‚Ä¢ ‚úÖ Extracci√≥n autom√°tica de datos HTML
   ‚Ä¢ ‚úÖ Purificaci√≥n inteligente con IA
   ‚Ä¢ ‚úÖ An√°lisis de productos y precios
   ‚Ä¢ ‚úÖ Interfaz gr√°fica completa
   ‚Ä¢ ‚úÖ Exportaci√≥n a Excel estructurado
   ‚Ä¢ ‚úÖ Detecci√≥n de duplicados
   ‚Ä¢ ‚úÖ Validaci√≥n de datos
   ‚Ä¢ ‚úÖ Categorizaci√≥n autom√°tica

üöÄ MEJORAS IMPLEMENTADAS:
   ‚Ä¢ ‚úÖ Pipeline completo integrado
   ‚Ä¢ ‚úÖ Purificaci√≥n en tiempo real
   ‚Ä¢ ‚úÖ UI mejorada con nuevos botones
   ‚Ä¢ ‚úÖ Exportaci√≥n multi-hoja
   ‚Ä¢ ‚úÖ An√°lisis con IA integrado
   ‚Ä¢ ‚úÖ Manejo de errores robusto

üí° TECNOLOG√çAS UTILIZADAS:
   ‚Ä¢ Python 3.x
   ‚Ä¢ Tkinter para UI
   ‚Ä¢ pandas para datos
   ‚Ä¢ openpyxl para Excel
   ‚Ä¢ BeautifulSoup para HTML
   ‚Ä¢ JSON para almacenamiento
   ‚Ä¢ Threading para UI responsiva

üéØ ESTADO: PROYECTO COMPLETADO ‚úÖ
"""
    
    text_widget = tk.Text(frame, wrap=tk.WORD, width=70, height=25, 
                         font=('Consolas', 9), bg='white', fg='#333')
    text_widget.insert(tk.END, stats_text)
    text_widget.config(state=tk.DISABLED)
    text_widget.pack(fill=tk.BOTH, expand=True)
    
    ttk.Button(frame, text="Cerrar", command=stats_window.destroy).pack(pady=10)

def verificar_archivos_necesarios():
    """Verifica que todos los archivos necesarios est√©n presentes"""
    
    archivos_requeridos = [
        "ferreteria_analyzer_app.py",
        "extraer_datos.py",
        "data_analyzer.py"
    ]
    
    archivos_faltantes = []
    for archivo in archivos_requeridos:
        if not (current_dir / archivo).exists():
            archivos_faltantes.append(archivo)
    
    if archivos_faltantes:
        messagebox.showerror("Archivos Faltantes", 
                           f"Faltan los siguientes archivos:\n" + 
                           "\n".join(archivos_faltantes))
        return False
    
    return True

def main():
    """Funci√≥n principal"""
    print("üîß Iniciando Demo del Pipeline Completo...")
    print("üìÅ Directorio de trabajo:", current_dir)
    
    # Verificar archivos
    if not verificar_archivos_necesarios():
        return
    
    # Mostrar bienvenida
    mostrar_bienvenida()

if __name__ == "__main__":
    main()
