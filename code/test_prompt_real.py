#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test del nuevo prompt con datos reales
Verifica que la IA ahora analice correctamente los datos reestructurados
"""

import os
import sys
import json

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from ferreteria_analyzer_app import FerreteriaAnalyzerApp
    from analizador_datos_inteligente import AnalizadorDatosInteligente
    from reestructurador_simple import ReestructuradorSimple
except ImportError as e:
    print(f"‚ùå Error al importar m√≥dulos: {e}")
    sys.exit(1)

def test_nuevo_prompt_real():
    """Prueba el nuevo prompt con datos reales"""
    print("üß™ PRUEBA DEL NUEVO PROMPT CON DATOS REALES")
    print("=" * 60)
    
    # Verificar que existen los datos
    datos_file = "datos_extraidos_app.json"
    if not os.path.exists(datos_file):
        print(f"‚ùå Error: No se encuentra el archivo {datos_file}")
        print("   Ejecuta primero la extracci√≥n de datos en la aplicaci√≥n.")
        return False
    
    print(f"‚úÖ Archivo de datos encontrado: {datos_file}")
    
    try:
        # Cargar datos extra√≠dos
        with open(datos_file, 'r', encoding='utf-8') as f:
            datos = json.load(f)
        
        print(f"‚úÖ Datos cargados: {len(datos.get('hojas', []))} hojas")
        
        # Crear instancia del analizador
        analizador = AnalizadorDatosInteligente()
        analisis_inteligente = analizador.analizar(datos)
        
        print("‚úÖ An√°lisis inteligente completado")
        
        # Reestructurar datos
        reestructurador = ReestructuradorSimple()
        datos_reestructurados = reestructurador.reestructurar(datos)
        
        print("‚úÖ Reestructuraci√≥n completada")
        
        # Simular el m√©todo prepare_data_summary
        resumen = generar_resumen_datos(analisis_inteligente, datos_reestructurados)
        
        # Extraer lista de proveedores
        proveedores_detectados = []
        if "=== PROVEEDORES CON DATOS REESTRUCTURADOS ===" in resumen:
            lineas = resumen.split('\n')
            for linea in lineas:
                if ':' in linea and 'Productos reestructurados:' in linea:
                    proveedor = linea.split(':')[0].strip()
                    if proveedor and proveedor not in proveedores_detectados:
                        proveedores_detectados.append(proveedor)
        
        print(f"‚úÖ Proveedores detectados: {len(proveedores_detectados)}")
        for prov in proveedores_detectados:
            print(f"   ‚Ä¢ {prov}")
        
        # Crear lista de proveedores
        lista_proveedores = ""
        if proveedores_detectados:
            lista_proveedores = "PROVEEDORES INCLUIDOS EN ESTE AN√ÅLISIS:\n"
            for i, prov in enumerate(proveedores_detectados, 1):
                lista_proveedores += f"{i}. {prov}\n"
            lista_proveedores += f"TOTAL: {len(proveedores_detectados)} PROVEEDORES\n\n"
        
        # Generar el nuevo prompt
        nuevo_prompt = f"""
                AN√ÅLISIS DE DATOS ESTRUCTURADOS DE FERRETER√çA

                {lista_proveedores}DATOS PROCESADOS E INTELIGENTEMENTE ORGANIZADOS:
                Los siguientes datos han sido limpiados, reestructurados y organizados autom√°ticamente 
                para facilitar el an√°lisis de calidad, estructura y oportunidades de mejora:

                {resumen}

                üéØ OBJETIVO DEL AN√ÅLISIS:
                Evaluar la calidad, estructura y organizaci√≥n de estos datos procesados,
                identificando patrones, oportunidades de mejora y insights de valor para el negocio.

                üìã AN√ÅLISIS SOLICITADO:

                1. **üìä EVALUACI√ìN DE CALIDAD DE DATOS:**
                   - Revisar la completitud de informaci√≥n por proveedor
                   - Evaluar la consistencia en formatos de precios y c√≥digos
                   - Identificar datos faltantes y √°reas de mejora

                2. **üí∞ AN√ÅLISIS DE PRECIOS Y MONEDAS:**
                   - Detectar patrones en las estructuras de precios
                   - Analizar la diversidad de monedas utilizadas
                   - Identificar oportunidades de estandarizaci√≥n

                3. **üîç INSIGHTS DE ORGANIZACI√ìN:**
                   - Evaluar c√≥mo est√°n organizados los productos por categor√≠as
                   - Identificar patrones en la nomenclatura y c√≥digos
                   - Sugerir mejoras en la estructura de datos

                4. **üí° RECOMENDACIONES DE NEGOCIO:**
                   - Oportunidades basadas en los datos disponibles
                   - Estrategias para mejorar la calidad de la informaci√≥n
                   - Sugerencias para optimizar la gesti√≥n de inventario

                5. **üìà OPTIMIZACI√ìN DE PROCESOS:**
                   - Identificar redundancias o inconsistencias
                   - Proponer mejoras en la organizaci√≥n de listas
                   - Recomendar est√°ndares para futuras actualizaciones

                üéØ ENFOQUE: Analiza la informaci√≥n como un consultor de datos que busca optimizar 
                la organizaci√≥n, calidad y utilidad de estos datos para toma de decisiones comerciales.

                Proporciona an√°lisis constructivo y pr√°ctico en espa√±ol, enfocado en valor de negocio.
                """
        
        # Guardar el prompt real
        with open("nuevo_prompt_real.txt", "w", encoding="utf-8") as f:
            f.write(nuevo_prompt)
        
        print("‚úÖ Nuevo prompt guardado en 'nuevo_prompt_real.txt'")
        
        # Mostrar resumen del prompt
        print("\nüìä RESUMEN DEL NUEVO PROMPT:")
        print("-" * 50)
        print(f"‚Ä¢ Proveedores incluidos: {len(proveedores_detectados)}")
        print(f"‚Ä¢ Tama√±o del resumen: {len(resumen)} caracteres")
        print(f"‚Ä¢ Enfoque: Calidad y organizaci√≥n de datos")
        print(f"‚Ä¢ Objetivo: Valor de negocio y optimizaci√≥n")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en el test: {str(e)}")
        return False

def generar_resumen_datos(analisis_inteligente, datos_reestructurados):
    """Genera el resumen de datos como lo hace prepare_data_summary"""
    
    try:
        # Estad√≠sticas b√°sicas
        total_original = analisis_inteligente.get('total_registros', 0)
        total_reestructurado = len(datos_reestructurados)
        eficiencia = (total_reestructurado / total_original * 100) if total_original > 0 else 0
        
        resumen = []
        resumen.append("=== AN√ÅLISIS INTELIGENTE CON REESTRUCTURACI√ìN DE DATOS ===")
        resumen.append(f"PLANILLA: FERRETERIA")
        resumen.append(f"TOTAL REGISTROS ORIGINALES: {total_original:,}")
        resumen.append(f"TOTAL PRODUCTOS REESTRUCTURADOS: {total_reestructurado:,}")
        resumen.append(f"EFICIENCIA DE REESTRUCTURACI√ìN: {eficiencia:.1f}%")
        resumen.append("")
        
        # An√°lisis por proveedor
        proveedores_stats = {}
        for producto in datos_reestructurados:
            proveedor = producto.get('proveedor', 'DESCONOCIDO')
            if proveedor not in proveedores_stats:
                proveedores_stats[proveedor] = {
                    'total': 0,
                    'con_precio': 0,
                    'con_codigo': 0
                }
            
            proveedores_stats[proveedor]['total'] += 1
            if producto.get('precio'):
                proveedores_stats[proveedor]['con_precio'] += 1
            if producto.get('codigo'):
                proveedores_stats[proveedor]['con_codigo'] += 1
        
        resumen.append("=== PROVEEDORES CON DATOS REESTRUCTURADOS ===")
        for proveedor, stats in proveedores_stats.items():
            if stats['total'] > 0:  # Solo mostrar proveedores con datos
                precio_pct = (stats['con_precio'] / stats['total'] * 100) if stats['total'] > 0 else 0
                codigo_pct = (stats['con_codigo'] / stats['total'] * 100) if stats['total'] > 0 else 0
                
                resumen.append(f"{proveedor}:")
                resumen.append(f"  ‚Ä¢ Productos reestructurados: {stats['total']:,}")
                resumen.append(f"  ‚Ä¢ Con precio detectado: {stats['con_precio']:,} ({precio_pct:.1f}%)")
                resumen.append(f"  ‚Ä¢ Con c√≥digo identificado: {stats['con_codigo']:,} ({codigo_pct:.1f}%)")
                resumen.append("")
        
        # Informaci√≥n adicional
        resumen.append("=== INFORMACI√ìN DE REESTRUCTURACI√ìN ===")
        resumen.append("‚Ä¢ DATOS INTELIGENTEMENTE PROCESADOS:")
        resumen.append("  - PRECIOS extra√≠dos y normalizados autom√°ticamente")
        resumen.append("  - C√ìDIGOS identificados mediante patrones avanzados")
        resumen.append("  - CATEGOR√çAS detectadas por an√°lisis sem√°ntico")
        resumen.append("  - PROVEEDORES organizados por hoja")
        resumen.append("  - MARCAS detectadas autom√°ticamente")
        resumen.append("  - DESCRIPCIONES limpias y optimizadas")
        resumen.append("  - DUPLICADOS eliminados autom√°ticamente")
        resumen.append("")
        resumen.append("USA ESTE AN√ÅLISIS PARA RECOMENDAR MEJORAS EN LA ESTRUCTURACI√ìN DE DATOS.")
        
        return "\n".join(resumen)
        
    except Exception as e:
        return f"Error generando resumen: {str(e)}"

def comparar_con_anterior():
    """Compara con el resultado anterior"""
    print("\n" + "=" * 60)
    print("üìà COMPARACI√ìN CON PROBLEMA ANTERIOR")
    print("=" * 60)
    
    print("\nüî¥ PROBLEMA ANTERIOR:")
    print("La IA respond√≠a: 'solo se cuenta con datos del proveedor Yayi'")
    print("Ignoraba otros proveedores como CRIMARAL, HERRAMETAL, etc.")
    
    print("\nüü¢ SOLUCI√ìN ESPERADA AHORA:")
    print("La IA deber√≠a analizar TODOS los proveedores detectados")
    print("Se enfocar√° en calidad de datos, no en comparaciones")
    print("Dar√° recomendaciones √∫tiles para cada proveedor")

if __name__ == "__main__":
    if test_nuevo_prompt_real():
        comparar_con_anterior()
        print("\n" + "=" * 60)
        print("üöÄ PR√ìXIMO PASO: Probar en la aplicaci√≥n real con IA")
        print("=" * 60)
    else:
        print("\n‚ùå Test fallido. Revisa los datos de entrada.")
